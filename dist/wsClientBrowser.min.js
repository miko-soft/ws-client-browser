var S=Object.defineProperty;var l=(y,h)=>S(y,"name",{value:h,configurable:!0});(()=>{"use strict";var y={};class h{constructor(){this.activeOns=[]}emit(t,e={}){const s=new CustomEvent(t,{detail:e});window.dispatchEvent(s)}on(t,e){const s=l(o=>{const n=this._getDetailValues(o.detail);e.call(null,...n)},"listenerWindow");this._removeOne(t,e),this.activeOns.push({eventName:t,listener:e,listenerWindow:s}),window.addEventListener(t,s)}once(t,e){const s=l(o=>{const n=this._getDetailValues(o.detail);e.call(null,...n),this._removeOne(t,e,s)},"listenerWindow");window.addEventListener(t,s,{once:!0})}off(t,e){this._removeOne(t,e)}offAll(t){let e=0;for(const s of this.activeOns)s.eventName===t&&(window.removeEventListener(s.eventName,s.listenerWindow),this.activeOns.splice(e,1)),e++}getListeners(){return{...this.activeOns}}_removeOne(t,e){if(!e)throw new Error("eventEmitter._removeOne Error: listener is not defined");let s=0;for(const o of this.activeOns)o.eventName===t&&o.listener.toString()===e.toString()&&(window.removeEventListener(o.eventName,o.listenerWindow),this.activeOns.splice(s,1)),s++}_getDetailValues(t){return t?Object.values(t):[]}}l(h,"EventEmitter");const a=new h;class b{generateID(){const e=Math.random().toString().replace("0.","").substring(0,3);return new Date().toISOString().replace(/\-/g,"").replace(/\:/g,"").replace("T","").replace("Z","").replace(".","")+e}nowTime(){const t=new Date;return new Intl.DateTimeFormat("en-us",{weekday:"long",year:"numeric",month:"numeric",day:"numeric",hour:"numeric",minute:"numeric",second:"numeric",fractionalSecondDigits:3,hour12:!1,timeZone:"UTC"}).format(t)}async sleep(t){await new Promise(e=>setTimeout(e,t))}printBuffer(t){console.log(t.toString("hex").match(/../g).join(" "))}tableOfBytes(t,e){let s=t.toString("hex").match(/../g);return s=s.map((n,r)=>(r===0&&(n=`
 `+n),(r+1)%e===0&&(n+=`
`),n)),s.join(" ")}}l(b,"Helper");const E=new b;class k{constructor(){this.delimiter=""}incoming(t){let e=!1,s;try{t=t.replace(this.delimiter,""),s=JSON.parse(t);const o=Object.keys(s);e=this._testFields(o)}catch{e=!1}if(e)return s;throw new Error(`Incoming message doesn't have valid "jsonRWS" subprotocol format. msg:: "${t}"`)}outgoing(t){const e=Object.keys(t);if(this._testFields(e))return JSON.stringify(t)+this.delimiter;throw new Error(`Outgoing message doesn't have valid "jsonRWS" subprotocol format. msg:: ${JSON.stringify(t)}`)}async processing(t,e,s,o,n){const r=t.id,u=t.from,m=t.to,c=t.cmd,p=t.payload;if(c==="socket/sendone"){const i=t.to,d=await o.findOne({id:i});await s.sendOne(t,d)}else if(c==="socket/send"){const i=m.map(f=>f),d=await o.find({id:{$in:i}});await s.send(t,d)}else if(c==="socket/broadcast")await s.broadcast(t,e);else if(c==="socket/sendall")await s.sendAll(t);else if(c==="socket/nick"){const i=t.payload;try{await o.setNick(e,i),t.payload=e.extension.nickname}catch(d){t.cmd="error",t.payload=d.message}e.extension.sendSelf(t)}else if(c==="room/enter"){const i=p;o.roomEnter(e,i),t.payload=`Entered in the room '${i}'`,e.extension.sendSelf(t)}else if(c==="room/exit"){const i=p;o.roomExit(e,p),t.payload=`Exited from the room '${i}'`,e.extension.sendSelf(t)}else if(c==="room/exitall")o.roomExitAll(e),t.payload="Exited from all rooms",e.extension.sendSelf(t);else if(c==="room/send"){const i=m;await s.sendRoom(t,e,i)}else if(c==="route")n.emit("route",t,e,s,o,n);else if(c==="question/socket/id")t.payload=e.extension.id,e.extension.sendSelf(t);else if(c==="question/socket/list"){const d=(await o.find()).map(f=>({id:f.extension.id,nickname:f.extension.nickname}));t.payload=d,e.extension.sendSelf(t)}else if(c==="question/room/list"){const i=await o.roomList();t.payload=i,e.extension.sendSelf(t)}else if(c==="question/room/listmy"){const i=await o.roomListOf(t.from);t.payload=i,e.extension.sendSelf(t)}}_testFields(t){const e=["id","from","to","cmd","payload"],s=["id","from","to","cmd"];let o=!0;for(const n of t)if(e.indexOf(n)===-1){o=!1;break}for(const n of s)if(t.indexOf(n)===-1){o=!1;break}return o}}l(k,"JsonRWS");const _=new k;class O{constructor(){this.delimiter=""}incoming(t){return t=t.replace(this.delimiter,""),t}outgoing(t){let e=t;return typeof t=="object"&&(e=JSON.stringify(t)),e+=this.delimiter,e}async process(){}}l(O,"Raw");const v=new O;class g{constructor(t){this.wcOpts=t,t.connectTimeout||(this.wcOpts.connectTimeout=8e3),t.reconnectAttempts===void 0&&(this.wcOpts.reconnectAttempts=6),t.reconnectDelay===void 0&&(this.wcOpts.reconnectDelay=5e3),t.questionTimeout===void 0&&(this.wcOpts.questionTimeout=13e3),t.subprotocols||(this.wcOpts.subprotocols=["jsonRWS","raw"]),t.debug||(this.wcOpts.debug=!1),t.debug_DataParser||(this.wcOpts.debug_DataParser=!1),this.wsURL,this.wsocket,this.socketID,this.attempt=1,this.subprotocolLib,this.helper=E}connect(t){if(!t||!/^wss?:\/\//.test(t))throw new Error("Bad websocket URL");this.socketID=this.helper.generateID();const e=new URL(t);return e.searchParams.set("socketID",this.socketID),this.wsURL=e.toString(),this.wsocket=new WebSocket(this.wsURL,this.wcOpts.subprotocols),this.onEvents(),new Promise(s=>{a.once("connected",()=>{s(this.wsocket)})})}disconnect(){this.wsocket&&this.wsocket.close(),this.blockReconnect()}async reconnect(){const t=this.wcOpts.reconnectAttempts,e=this.wcOpts.reconnectDelay;this.attempt<=t&&(await this.helper.sleep(e),this.connect(this.wsURL),this._debugger(`Reconnect attempt #${this.attempt} of ${t} in ${e}ms`),this.attempt++)}blockReconnect(){this.attempt=this.wcOpts.reconnectAttempts+1}onEvents(){this.wsocket.onopen=async t=>{this._debugger(`WS Connection opened -- socketID: ${this.socketID}, subprotocol(handshaked): "${this.wsocket.protocol}"`),this.onMessage(),this.attempt=1,this.wsocket&&this.wsocket.protocol==="raw"?this.subprotocolLib=v:this.wsocket&&this.wsocket.protocol==="jsonRWS"?this.subprotocolLib=_:this.subprotocolLib=v,a.emit("connected")},this.wsocket.onclose=t=>{this._debugger("WS Connection closed"),delete this.wsocket,delete this.socketID,this.reconnect(),a.emit("disconnected")},this.wsocket.onerror=t=>{}}onMessage(){if(!this.wsocket)return;const t=this.wsocket.protocol;this.wsocket.addEventListener("message",e=>{try{const s=e.data;if(this._debugger("Received::",s),!new RegExp(this.subprotocolLib.delimiter).test(s))return;const n=this.subprotocolLib.incoming(s),r={msg:n,msgSTR:s};n.cmd==="route"&&t==="jsonRWS"?a.emit("route",r):n.cmd==="server-error"&&t==="jsonRWS"?(this.blockReconnect(),a.emit("server-error",r)):/^question\//.test(n.cmd)&&t==="jsonRWS"?a.emit("question",r):a.emit("message",r)}catch(s){a.emit("message-error",s)}})}async carryOut(t,e,s){const o=this.helper.generateID(),n=this.socketID;if(!Array.isArray(t)&&typeof t!="string")throw new Error('ERRcarryOut: "to" argument must be string');if(Array.isArray(t)){for(const m of t)if(typeof m!="string")throw new Error('ERRcarryOut: "to" argument must be string')}const r={id:o,from:n,to:t,cmd:e,payload:s},u=this.subprotocolLib.outgoing(r);return await this.socketWrite(u),this._debugger("Sent::",u),r}async socketWrite(t){if(await new Promise(e=>setTimeout(e,0)),this.wsocket&&this.wsocket.readyState===1)this.wsocket.send(t);else throw new Error("Socket is not writeble or doesn't exist")}async sendOne(t,e){const s="socket/sendone";return await this.carryOut(t,s,e)}async send(t,e){const s="socket/send";return await this.carryOut(t,s,e)}async broadcast(t){const e="0",s="socket/broadcast";return await this.carryOut(e,s,t)}async sendAll(t){const e="0",s="socket/sendall";return await this.carryOut(e,s,t)}async question(t){const e=this.socketID,s=void 0;return await this.carryOut(e,t,s),new Promise(async(o,n)=>{const r=l(u=>{u.cmd===t&&o(u)},"listener");this.once("question",r),await this.helper.sleep(this.wcOpts.questionTimeout),this.off("question",r),n(new Error(`No answer for the question: ${t}`))})}async questionSocketId(){const t=await this.question("question/socket/id");return this.socketID=t.payload,this.socketID}async questionSocketList(){return(await this.question("question/socket/list")).payload}async questionRoomList(){return(await this.question("question/room/list")).payload}async questionRoomListmy(){return(await this.question("question/room/listmy")).payload}async roomEnter(t){const e="0",s="room/enter",o=t;return await this.carryOut(e,s,o)}async roomExit(t){const e="0",s="room/exit",o=t;return await this.carryOut(e,s,o)}async roomExitAll(){const t="0",e="room/exitall";return await this.carryOut(t,e,void 0)}async roomSend(t,e){const s=t,o="room/send";return await this.carryOut(s,o,e)}async setNick(t){const e="0",s="socket/nick",o=t;return await this.carryOut(e,s,o)}async route(t,e){const s="0",o="route",n={uri:t,body:e};return await this.carryOut(s,o,n)}on(t,e){a.on(t,e)}once(t,e){return a.once(t,e)}off(t,e){return a.off(t,e)}offAll(t){return a.offAll(t)}_debugger(...t){const e=t.join("");this.wcOpts.debug&&console.log(e)}}l(g,"WsClientBrowser13");const x=g;typeof window<"u"&&(window.mikosoft||(window.mikosoft={}),window.mikosoft.WsClientBrowser=x)})();

//# sourceMappingURL=wsClientBrowser.min.js.map